from pympler.asizeof import asizesof

'''
ğŸ“Œ Geradores (Generators) em Python

Os geradores (generators) sÃ£o uma maneira eficiente de criar iteradores em Python sem armazenar todos os valores na memÃ³ria. Eles sÃ£o Ãºteis para lidar com grandes quantidades de dados ou quando queremos gerar valores sob demanda.
'''

# ğŸ“Œ 1. Criando um Gerador Simples com yield:
def contar_ate(n):
    for i in range(1, n + 1):
        yield i  # Pausa aqui e retorna o valor

# Criando um gerador
contador = contar_ate(5)

# Iterando sobre o gerador
for numero in contador:
    print(numero)
'''
ğŸ”¹ SaÃ­da:
1
2
3
4
5
âœ… ExplicaÃ§Ã£o:
	â€¢	A funÃ§Ã£o contar_ate nÃ£o retorna todos os valores de uma vez.
	â€¢	Em cada yield, a execuÃ§Ã£o pausa, armazenando o estado atual.
	â€¢	Quando a prÃ³xima iteraÃ§Ã£o ocorre, a execuÃ§Ã£o continua de onde parou.
'''




# ğŸ“Œ 2. ComparaÃ§Ã£o: FunÃ§Ã£o Normal vs. Gerador:
#ğŸ”¹ FunÃ§Ã£o Normal (Usando return)
def quadrados_lista(n):
    return [x ** 2 for x in range(n)]  # Retorna uma lista completa

print(quadrados_lista(5))
'''
ğŸ”¹ SaÃ­da: [0, 1, 4, 9, 16]
ğŸš¨ Problema: Se n for muito grande, isso ocupa muita memÃ³ria.
'''

# ğŸ”¹ Gerador (Usando yield)
def quadrados_gerador(n):
    for x in range(n):
        yield x ** 2  # Retorna um valor por vez

# Criando o gerador
quadrados = quadrados_gerador(5)

# Consumindo os valores um por um
print(next(quadrados))  # 0
print(next(quadrados))  # 1
print(next(quadrados))  # 4
# âœ… Vantagem: Economiza memÃ³ria, pois gera um valor por vez, sem criar uma lista inteira na memÃ³ria.




# ğŸ“Œ 3. Gerador Infinito (Lazy Evaluation):
# Podemos criar um gerador infinito, Ãºtil para streams de dados, leitura de logs, etc.
def numeros_infinitos():
    n = 0
    while True:
        yield n
        n += 1

gerador = numeros_infinitos()

print(next(gerador))  # 0
print(next(gerador))  # 1
print(next(gerador))  # 2
# âš  Cuidado! Se usado em um for, ele nunca vai parar!




# ğŸ“Œ 4. yield from (Delegando IteraÃ§Ã£o):
# Podemos usar yield from para delegar a geraÃ§Ã£o de valores para outro iterÃ¡vel.
def gerador_lista():
    yield from [1, 2, 3, 4, 5]  # Equivalente a fazer vÃ¡rios `yield`

for numero in gerador_lista():
    print(numero)
'''
ğŸ”¹ SaÃ­da:
1
2
3
4
5
âœ… Vantagem: CÃ³digo mais limpo ao reutilizar iterÃ¡veis!
'''




# ğŸ“Œ 5. Convertendo Geradores para Listas:
# Se for necessÃ¡rio, podemos converter um gerador em uma lista:
def gerar_pares(n):
    for i in range(n):
        if i % 2 == 0:
            yield i

pares = list(gerar_pares(10))
print(pares)  # [0, 2, 4, 6, 8]
# ğŸš€ Isso deve ser feito apenas se a lista for pequena, pois perde a eficiÃªncia dos geradores.




# ğŸ“Œ 6. Geradores com ExpressÃµes (Generator Expressions):
# Podemos criar geradores com uma sintaxe compacta, semelhante Ã  list comprehension.
gerador = (x ** 2 for x in range(5))  # ParÃªnteses em vez de colchetes!

print(next(gerador))  # 0
print(next(gerador))  # 1
print(next(gerador))  # 4
# âœ… Vantagem: Mais eficiente do que listas quando nÃ£o precisamos armazenar todos os valores de uma vez.




# ğŸ“Œ 7. Comparando MemÃ³ria: Lista vs. Gerador:
from pympler.asizeof import asizesof

# Criando uma lista com 1 milhÃ£o de nÃºmeros
lista = [x for x in range(1_000_000)]

# Criando um gerador com 1 milhÃ£o de nÃºmeros
gerador = (x for x in range(1_000_000))

# Medindo o tamanho em memÃ³ria
memoria_lista, memoria_gerador = asizesof(lista, gerador)

print(f"Lista ocupa: {memoria_lista / 1024 ** 2:.2f} MB")
print(f"Gerador ocupa: {memoria_gerador / 1024 ** 2:.2f} MB")
'''
ğŸ”¹ SaÃ­da esperada (pode variar):
Lista ocupa: 37.26 MB
Gerador ocupa: 0.00 MB
'''