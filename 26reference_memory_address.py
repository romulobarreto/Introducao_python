# ğŸ”¹ 1. Verificando o EndereÃ§o de MemÃ³ria:
# O Python tem a funÃ§Ã£o id() que permite ver o endereÃ§o de memÃ³ria de um objeto.
x = 10
y = x

print(id(x))  # Exemplo: 140711882231216
print(id(y))  # Mesmo endereÃ§o que x
# âœ… Como y = x, ambos apontam para o mesmo endereÃ§o de memÃ³ria.




# ğŸ”¹ 2. ReferÃªncia em Listas (MutÃ¡veis):
# Os tipos mutÃ¡veis, como listas, dicionÃ¡rios e conjuntos, compartilham a referÃªncia ao mesmo objeto.
lista1 = [1, 2, 3]
lista2 = lista1  # lista2 agora aponta para o mesmo endereÃ§o de lista1

lista2.append(4)

print(lista1)  # [1, 2, 3, 4] -> lista1 tambÃ©m foi alterada!
print(lista2)  # [1, 2, 3, 4]
print(id(lista1) == id(lista2))  # True, pois ambas referenciam o mesmo objeto
# âœ… Como lista1 e lista2 compartilham a mesma referÃªncia, qualquer mudanÃ§a em uma afeta a outra.




# ğŸ”¹ 3. Evitando a ReferÃªncia Compartilhada (Criando uma CÃ³pia):
# Se quiser criar uma cÃ³pia independente de uma lista, use copy() ou [:].
lista1 = [1, 2, 3]
lista2 = lista1.copy()  # Agora lista2 Ã© uma nova lista, independente de lista1

lista2.append(4)

print(lista1)  # [1, 2, 3] (nÃ£o foi alterada)
print(lista2)  # [1, 2, 3, 4] (apenas lista2 mudou)
print(id(lista1) == id(lista2))  # False, agora sÃ£o objetos diferentes

# Outra forma:
lista2 = lista1[:]  # TambÃ©m cria uma cÃ³pia




# ğŸ”¹ 4. ReferÃªncia com Objetos Personalizados:
# O mesmo conceito se aplica a classes e objetos.
class Pessoa:
    def __init__(self, nome):
        self.nome = nome

p1 = Pessoa("Ana")
p2 = p1  # p2 aponta para o mesmo objeto de p1

p2.nome = "Carlos"

print(p1.nome)  # "Carlos" (foi alterado em p1 tambÃ©m)
print(p2.nome)  # "Carlos"
print(id(p1) == id(p2))  # True, pois compartilham a referÃªncia




# ğŸ”¹ 5. Criando Objetos Independentes:
# Para criar uma cÃ³pia independente de um objeto, usamos copy.deepcopy().
import copy

p1 = Pessoa("Ana")
p2 = copy.deepcopy(p1)  # Agora p2 Ã© um novo objeto independente

p2.nome = "Carlos"

print(p1.nome)  # "Ana" (nÃ£o foi alterado)
print(p2.nome)  # "Carlos"
print(id(p1) == id(p2))  # False, agora sÃ£o objetos diferentes
