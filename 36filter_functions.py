'''
A funÃ§Ã£o filter() Ã© usada para filtrar elementos de uma coleÃ§Ã£o (como listas e tuplas) com base em uma condiÃ§Ã£o. Ela retorna um iterador contendo apenas os elementos que atenderem Ã  condiÃ§Ã£o especificada.

Aqui estÃ£o alguns exemplos bem explicados para vocÃª entender o uso do filter():
'''

# ğŸ“Œ Exemplo 1: Filtrando nÃºmeros pares:
# Lista de nÃºmeros
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# FunÃ§Ã£o que verifica se um nÃºmero Ã© par
def eh_par(num):
    return num % 2 == 0

# Usando filter para pegar apenas os nÃºmeros pares
pares = list(filter(eh_par, numeros))

print(pares)  # SaÃ­da: [2, 4, 6, 8, 10]
# âœ… Aqui usamos uma funÃ§Ã£o normal (def) para verificar se o nÃºmero Ã© par. O filter() percorre a lista e retorna apenas os valores que retornam True.




# ğŸ“Œ Exemplo 2: Usando filter() com lambda:
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Usando lambda dentro do filter
pares = list(filter(lambda num: num % 2 == 0, numeros))

print(pares)  # SaÃ­da: [2, 4, 6, 8, 10]
# âœ… Aqui usamos uma funÃ§Ã£o lambda diretamente dentro do filter(), o que deixa o cÃ³digo mais curto e direto.




# ğŸ“Œ Exemplo 3: Filtrando palavras com mais de 5 letras:
palavras = ["banana", "uva", "maÃ§Ã£", "abacaxi", "kiwi", "laranja"]

# Filtrar palavras com mais de 5 letras
longas = list(filter(lambda palavra: len(palavra) > 5, palavras))

print(longas)  # SaÃ­da: ['banana', 'abacaxi', 'laranja']
# âœ… Aqui filtramos apenas as palavras que tÃªm mais de 5 letras.




# ğŸ“Œ Exemplo 4: Filtrando valores negativos de uma lista:
valores = [-10, -5, 0, 5, 10, 15, -20, 30]

# Pegando apenas os valores positivos
positivos = list(filter(lambda x: x >= 0, valores))

print(positivos)  # SaÃ­da: [0, 5, 10, 15, 30]
# âœ… Isso Ã© Ãºtil quando vocÃª quer remover valores negativos de uma lista.




# ğŸ“Œ Exemplo 5: Filtrando dicionÃ¡rios (exemplo mais avanÃ§ado):
pessoas = [
    {"nome": "Alice", "idade": 25},
    {"nome": "Bruno", "idade": 17},
    {"nome": "Carlos", "idade": 30},
    {"nome": "Daniela", "idade": 16},
]

# Filtrar apenas maiores de idade
maiores = list(filter(lambda pessoa: pessoa["idade"] >= 18, pessoas))

print(maiores)
# SaÃ­da:
# [{'nome': 'Alice', 'idade': 25}, {'nome': 'Carlos', 'idade': 30}]
# âœ… Aqui usamos filter() para pegar apenas as pessoas que tÃªm 18 anos ou mais.

'''
ğŸ¤” Quando usar filter()?
	â€¢	Quando vocÃª precisa remover elementos indesejados de uma lista com base em uma condiÃ§Ã£o.
	â€¢	Quando a lÃ³gica de filtragem Ã© simples e nÃ£o precisa de loops explÃ­citos.
	â€¢	Quando vocÃª quer um cÃ³digo mais limpo e conciso.

ğŸ”¹ Dica: Se a filtragem precisar de regras mais complexas ou manipular os dados, pode ser melhor usar list comprehensions ao invÃ©s de filter().
'''
