'''üìå Tratamento de Exce√ß√µes (Exception Handling) em Python

O tratamento de exce√ß√µes √© usado para lidar com erros inesperados durante a execu√ß√£o do programa. Em Python, usamos try, except, else e finally para capturar e tratar exce√ß√µes sem interromper o fluxo do c√≥digo.'''

# üìå 1. Capturando Exce√ß√µes com try e except:
# Quando um erro ocorre, Python normalmente interrompe a execu√ß√£o e exibe uma mensagem de erro. Podemos evitar que o programa pare usando try e except:

#üîπ Exemplo: Lidando com erro de divis√£o por zero (ZeroDivisionError)
try:
    numero = int(input("Digite um n√∫mero: "))
    resultado = 10 / numero  # Pode gerar ZeroDivisionError
    print(f"Resultado: {resultado}")
except ZeroDivisionError:
    print("Erro: N√£o √© poss√≠vel dividir por zero!")
'''
‚úÖ Explica√ß√£o:
	‚Ä¢	Se o usu√°rio digitar 0, a divis√£o falharia, mas com except, exibimos uma mensagem amig√°vel em vez de um erro no console.
'''




# üìå 2. Capturando Exce√ß√µes Espec√≠ficas: 
# Podemos capturar tipos espec√≠ficos de exce√ß√µes para tratar cada caso de forma diferente.

# üîπ Exemplo: Capturando ValueError e ZeroDivisionError separadamente
try:
    numero = int(input("Digite um n√∫mero: "))  # Pode gerar ValueError
    resultado = 10 / numero  # Pode gerar ZeroDivisionError
    print(f"Resultado: {resultado}")
except ValueError:
    print("Erro: Voc√™ precisa digitar um n√∫mero inteiro.")
except ZeroDivisionError:
    print("Erro: N√£o √© poss√≠vel dividir por zero!")
'''
‚úÖ Explica√ß√£o:
	‚Ä¢	Se o usu√°rio digitar um texto em vez de n√∫mero, ocorre um ValueError.
	‚Ä¢	Se o usu√°rio digitar 0, ocorre um ZeroDivisionError.
	‚Ä¢	Cada erro √© tratado separadamente.
'''




# üìå 3. Capturando Exce√ß√µes Gen√©ricas:
# Podemos capturar qualquer erro com um except gen√©rico:
try:
    arquivo = open("arquivo_inexistente.txt", "r")  # Pode gerar FileNotFoundError
    conteudo = arquivo.read()
    print(conteudo)
except Exception as erro:  # Captura qualquer erro
    print(f"Ocorreu um erro: {erro}")
'''
‚úÖ Explica√ß√£o:
	‚Ä¢	Se o arquivo n√£o existir, capturamos o erro e exibimos uma mensagem amig√°vel.
	‚Ä¢	Exception √© a classe base para todas as exce√ß√µes em Python.
	‚Ä¢	erro recebe a descri√ß√£o do erro gerado.

‚ö† Aten√ß√£o: Usar except Exception √© √∫til para evitar que o programa quebre, mas pode mascarar erros importantes. Sempre que poss√≠vel, capture exce√ß√µes espec√≠ficas.
'''




# üìå 4. Usando else no Tratamento de Exce√ß√µes:
# O bloco else √© executado se nenhuma exce√ß√£o for levantada dentro do try.

# üîπ Exemplo: Se n√£o houver erro, executa else
try:
    numero = int(input("Digite um n√∫mero: "))
    resultado = 10 / numero
except ZeroDivisionError:
    print("Erro: N√£o √© poss√≠vel dividir por zero!")
except ValueError:
    print("Erro: Voc√™ precisa digitar um n√∫mero v√°lido.")
else:
    print(f"Resultado: {resultado}")  # Executado apenas se n√£o houver erro
'''
‚úÖ Explica√ß√£o:
	‚Ä¢	Se o usu√°rio inserir um valor correto, o c√≥digo no else ser√° executado.
	‚Ä¢	Se houver erro, o else n√£o ser√° executado.
'''




# üìå 5. Usando finally para Executar C√≥digo Sempre:
# O bloco finally sempre ser√° executado, independentemente de ocorrer erro ou n√£o. Isso √© √∫til para fechar arquivos, liberar recursos, fechar conex√µes com bancos de dados, etc.

# üîπ Exemplo: Garantindo que um arquivo seja fechado
try:
    arquivo = open("meuarquivo.txt", "r")  # Pode gerar FileNotFoundError
    conteudo = arquivo.read()
    print(conteudo)
except FileNotFoundError:
    print("Erro: O arquivo n√£o foi encontrado.")
finally:
    print("Finalizando opera√ß√£o...")
'''
‚úÖ Explica√ß√£o:
	‚Ä¢	Se o arquivo for aberto com sucesso, ele ser√° lido.
	‚Ä¢	Se o arquivo n√£o existir, tratamos o erro com except.
	‚Ä¢	O finally ser√° executado de qualquer jeito, √∫til para garantir que o c√≥digo finalize corretamente.
'''




# üìå 6. Criando Exce√ß√µes Personalizadas (raise):
# Podemos levantar (raise) exce√ß√µes manualmente se uma condi√ß√£o espec√≠fica for atendida.

# üîπ Exemplo: Criando uma exce√ß√£o personalizada
def dividir(a, b):
    if b == 0:
        raise ValueError("Erro: O denominador n√£o pode ser zero.")  # Lan√ßando uma exce√ß√£o
    return a / b

try:
    resultado = dividir(10, 0)
    print(resultado)
except ValueError as erro:
    print(erro)
'''
‚úÖ Explica√ß√£o:
	‚Ä¢	A fun√ß√£o dividir() verifica se b √© zero e lan√ßa um ValueError.
	‚Ä¢	O try captura essa exce√ß√£o e exibe uma mensagem personalizada.
'''




# üìå 7. Criando Exce√ß√µes Personalizadas (class Exception):
# Podemos criar nossas pr√≥prias exce√ß√µes para situa√ß√µes espec√≠ficas.

# üîπ Exemplo: Criando uma exce√ß√£o SaldoInsuficienteError
class SaldoInsuficienteError(Exception):
    def __init__(self, mensagem="Erro: Saldo insuficiente para saque!"):
        super().__init__(mensagem)

def sacar(saldo, valor):
    if valor > saldo:
        raise SaldoInsuficienteError()
    return saldo - valor

try:
    novo_saldo = sacar(100, 200)
    print(f"Novo saldo: R$ {novo_saldo}")
except SaldoInsuficienteError as erro:
    print(erro)
'''
‚úÖ Explica√ß√£o:
	‚Ä¢	Criamos a exce√ß√£o SaldoInsuficienteError que herda de Exception.
	‚Ä¢	Se o saque for maior que o saldo, a exce√ß√£o ser√° lan√ßada.
	‚Ä¢	O try captura a exce√ß√£o e exibe a mensagem personalizada.
'''