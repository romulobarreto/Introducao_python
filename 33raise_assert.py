'''
ğŸ“Œ raise e assert (Raising and Asserting Exceptions) em Python

Em Python, usamos raise para lanÃ§ar exceÃ§Ãµes manualmente e assert para criar verificaÃ§Ãµes que garantem que certas condiÃ§Ãµes sejam atendidas durante a execuÃ§Ã£o do cÃ³digo.
'''

# ğŸ“Œ 1. LanÃ§ando ExceÃ§Ãµes com raise:
# O comando raise nos permite forÃ§ar um erro intencionalmente, interrompendo a execuÃ§Ã£o do programa e exibindo uma mensagem personalizada.

# ğŸ”¹ Sintaxe bÃ¡sica do raise
class TipoDeErro(Exception):
    pass
raise TipoDeErro("Mensagem de erro personalizada")
'''
	â€¢	TipoDeErro: Deve ser uma classe de exceÃ§Ã£o vÃ¡lida, como ValueError, TypeError, KeyError, etc.
	â€¢	Mensagem de erro: Texto explicativo sobre o erro.
'''




# ğŸ“Œ 2. Exemplo Simples de raise:
def dividir(a, b):
    if b == 0:
        raise ZeroDivisionError("Erro: O denominador nÃ£o pode ser zero!")  
    return a / b

try:
    resultado = dividir(10, 0)
    print(resultado)
except ZeroDivisionError as erro:
    print(erro)
'''
âœ… ExplicaÃ§Ã£o:
	â€¢	Se b for 0, o cÃ³digo levanta um erro com raise.
	â€¢	O try-except captura o erro e exibe a mensagem.
'''




# ğŸ“Œ 3. Criando ExceÃ§Ãµes Personalizadas com raise:
# Podemos definir nossas prÃ³prias classes de exceÃ§Ã£o herdando de Exception.

# ğŸ”¹ Exemplo: Criando e lanÃ§ando uma exceÃ§Ã£o personalizada
class SaldoInsuficienteError(Exception):
    def __init__(self, saldo, valor):
        super().__init__(f"Erro: Saldo insuficiente! Saldo disponÃ­vel: R$ {saldo}, Tentativa de saque: R$ {valor}")

def sacar(saldo, valor):
    if valor > saldo:
        raise SaldoInsuficienteError(saldo, valor)
    return saldo - valor

try:
    novo_saldo = sacar(100, 200)
    print(f"Novo saldo: R$ {novo_saldo}")
except SaldoInsuficienteError as erro:
    print(erro)
'''
âœ… ExplicaÃ§Ã£o:
	â€¢	Criamos a classe SaldoInsuficienteError.
	â€¢	Se o valor do saque for maior que o saldo, lanÃ§amos essa exceÃ§Ã£o personalizada.
	â€¢	O try-except captura e exibe a mensagem de erro.
'''




# ğŸ“Œ 4. O Que Ã© assert?:
# O assert Ã© usado para garantir que uma condiÃ§Ã£o seja verdadeira durante a execuÃ§Ã£o do programa. Se a condiÃ§Ã£o for falsa, ele lanÃ§a automaticamente um AssertionError.

# ğŸ”¹ Sintaxe bÃ¡sica do assert
assert condiÃ§Ã£o, "Mensagem de erro opcional"
'''
	â€¢	condiÃ§Ã£o: ExpressÃ£o que deve ser verdadeira.
	â€¢	Mensagem de erro: Opcional, mas Ãºtil para identificar o problema.
'''




# ğŸ“Œ 5. Exemplo Simples de assert:
def dividir(a, b):
    assert b != 0, "Erro: O denominador nÃ£o pode ser zero!"
    return a / b

print(dividir(10, 2))  # OK
print(dividir(10, 0))  # Gera AssertionError
'''
âœ… ExplicaÃ§Ã£o:
	â€¢	O assert verifica se b nÃ£o Ã© zero.
	â€¢	Se b == 0, um AssertionError Ã© gerado com a mensagem personalizada.
'''




# ğŸ“Œ 6. Exemplo Completo com raise e assert:
def cadastrar_usuario(nome, idade):
    assert isinstance(nome, str), "Erro: O nome deve ser uma string!"  
    assert isinstance(idade, int), "Erro: A idade deve ser um nÃºmero inteiro!"
    
    if idade < 18:
        raise ValueError("Erro: O usuÃ¡rio deve ter pelo menos 18 anos.")

    print(f"UsuÃ¡rio {nome} cadastrado com sucesso!")

try:
    cadastrar_usuario("JoÃ£o", "21")  # Vai gerar AssertionError
except Exception as erro:
    print(erro)

try:
    cadastrar_usuario("Ana", 16)  # Vai gerar ValueError
except Exception as erro:
    print(erro)
'''
âœ… ExplicaÃ§Ã£o:
	â€¢	assert verifica se os tipos sÃ£o corretos.
	â€¢	raise impede o cadastro de menores de idade.
	â€¢	Se houver erro, o try-except captura e exibe a mensagem.
'''