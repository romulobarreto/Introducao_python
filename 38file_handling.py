'''
A manipulaÃ§Ã£o de arquivos em Python envolve operaÃ§Ãµes como leitura, escrita, adiÃ§Ã£o de conteÃºdo e manipulaÃ§Ã£o de arquivos binÃ¡rios. Aqui estÃ£o alguns exemplos bem explicados para cada situaÃ§Ã£o:
'''

# ğŸ“Œ 1. Abrindo e Lendo um Arquivo de Texto (open + read):
# Abrindo um arquivo em modo de leitura ('r')
with open("exemplo.txt", "r", encoding="utf-8") as arquivo:
    conteudo = arquivo.read()  # Lendo todo o conteÃºdo do arquivo
    print(conteudo)
# âœ… ExplicaÃ§Ã£o: O arquivo Ã© aberto no modo de leitura ("r"). O with garante que ele serÃ¡ fechado automaticamente.




# ğŸ“Œ 2. Lendo um Arquivo Linha por Linha (readline e readlines):
with open("exemplo.txt", "r", encoding="utf-8") as arquivo:
    print(arquivo.readline())  # LÃª apenas a primeira linha

with open("exemplo.txt", "r", encoding="utf-8") as arquivo:
    linhas = arquivo.readlines()  # Retorna uma lista com todas as linhas
    print(linhas)
'''
âœ… ExplicaÃ§Ã£o:
	â€¢	readline() lÃª uma Ãºnica linha do arquivo.
	â€¢	readlines() retorna uma lista onde cada elemento Ã© uma linha do arquivo.
'''




# ğŸ“Œ 3. Escrevendo em um Arquivo (write):
# Modo "w" sobrescreve o arquivo se ele jÃ¡ existir
with open("novo_arquivo.txt", "w", encoding="utf-8") as arquivo:
    arquivo.write("Primeira linha do arquivo.\n")
    arquivo.write("Segunda linha do arquivo.\n")
# âœ… ExplicaÃ§Ã£o: O modo "w" cria o arquivo caso ele nÃ£o exista. Se jÃ¡ existir, ele Ã© sobrescrito.




# ğŸ“Œ 4. Adicionando ConteÃºdo a um Arquivo (append):
# Modo "a" adiciona conteÃºdo ao final do arquivo sem apagar o que jÃ¡ existe
with open("novo_arquivo.txt", "a", encoding="utf-8") as arquivo:
    arquivo.write("Essa linha foi adicionada!\n")
# âœ… ExplicaÃ§Ã£o: O modo "a" mantÃ©m o conteÃºdo do arquivo e apenas adiciona novas linhas.




# ğŸ“Œ 5. Trabalhando com Arquivos BinÃ¡rios:
# ğŸ”¹ Escrevendo Dados BinÃ¡rios (wb)
dados_binarios = b'\x50\x79\x74\x68\x6F\x6E'  # RepresentaÃ§Ã£o binÃ¡ria da palavra "Python"

with open("arquivo_binario.dat", "wb") as arquivo:
    arquivo.write(dados_binarios)
# âœ… ExplicaÃ§Ã£o: O modo "wb" escreve arquivos em formato binÃ¡rio.

# ğŸ”¹ Lendo Dados BinÃ¡rios (rb)
with open("arquivo_binario.dat", "rb") as arquivo:
    conteudo = arquivo.read()
    print(conteudo)  # SaÃ­da: b'Python'
# âœ… ExplicaÃ§Ã£o: O modo "rb" lÃª o conteÃºdo do arquivo binÃ¡rio e retorna os dados como bytes.




# ğŸ“Œ 6. Gravando e Lendo Objetos com pickle (SerializaÃ§Ã£o de Dados):
# O mÃ³dulo pickle permite salvar estruturas de dados Python (listas, dicionÃ¡rios, etc.) em arquivos binÃ¡rios e recuperÃ¡-las depois.

# ğŸ”¹ Salvando um Objeto com pickle
import pickle

dados = {"nome": "Alice", "idade": 25, "cidade": "SÃ£o Paulo"}

with open("dados.pickle", "wb") as arquivo:
    pickle.dump(dados, arquivo)  # Serializa e salva os dados
# âœ… ExplicaÃ§Ã£o: O pickle.dump() grava os dados no arquivo binÃ¡rio.

# ğŸ”¹ Lendo um Objeto com pickle
with open("dados.pickle", "rb") as arquivo:
    dados_carregados = pickle.load(arquivo)  # LÃª e desserializa os dados
    print(dados_carregados)  # SaÃ­da: {'nome': 'Alice', 'idade': 25, 'cidade': 'SÃ£o Paulo'}
# âœ… ExplicaÃ§Ã£o: O pickle.load() reconstrÃ³i o objeto original.




# ğŸ“Œ 7. Usando os para Manipular Arquivos (Renomear, Apagar, Verificar):
import os

# Renomear um arquivo
os.rename("novo_arquivo.txt", "arquivo_renomeado.txt")

# Verificar se um arquivo existe
if os.path.exists("arquivo_renomeado.txt"):
    print("O arquivo existe.")

# Remover um arquivo
os.remove("arquivo_renomeado.txt")
print("Arquivo removido.")
# âœ… ExplicaÃ§Ã£o: O mÃ³dulo os permite renomear, verificar e excluir arquivos do sistema.




# ğŸ“Œ 8. Usando shutil para Copiar Arquivos:
import shutil

# Copiando um arquivo
shutil.copy("dados.pickle", "backup_dados.pickle")
print("Arquivo copiado com sucesso!")
# âœ… ExplicaÃ§Ã£o: O shutil.copy() copia um arquivo para outro local.