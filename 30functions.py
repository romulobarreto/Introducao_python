# ğŸ“Œ 1. Criando uma FunÃ§Ã£o Simples:
def saudacao():
    print("OlÃ¡, seja bem-vindo!")

saudacao()
#âœ… ExplicaÃ§Ã£o: Criamos uma funÃ§Ã£o saudacao() que exibe uma mensagem quando chamada.



# ğŸ“Œ 2. FunÃ§Ã£o com ParÃ¢metros:
def saudacao(nome):
    print(f"OlÃ¡, {nome}! Seja bem-vindo!")

saudacao("RÃ´mulo")
saudacao("Maria")
# âœ… ExplicaÃ§Ã£o: A funÃ§Ã£o recebe um parÃ¢metro nome, permitindo personalizar a saudaÃ§Ã£o.




# ğŸ“Œ 3. FunÃ§Ã£o com Retorno de Valor:
def soma(a, b):
    return a + b  # Retorna o resultado da soma

resultado = soma(5, 3)
print(f"O resultado da soma Ã© {resultado}")
# âœ… ExplicaÃ§Ã£o: A funÃ§Ã£o soma() retorna um valor, que pode ser armazenado em uma variÃ¡vel e utilizado depois.




# ğŸ“Œ 4. ParÃ¢metros Opcionais com Valores PadrÃ£o:
def apresentar(nome, idade=18):
    print(f"Nome: {nome}, Idade: {idade}")

apresentar("JoÃ£o", 25)
apresentar("Ana")  # Usa o valor padrÃ£o 18
# âœ… ExplicaÃ§Ã£o: Se o usuÃ¡rio nÃ£o informar a idade, o valor padrÃ£o serÃ¡ 18.



# ğŸ“Œ 5. *args â€“ MÃºltiplos Argumentos Posicionais:
def soma(*args):
    return sum(args)

print(soma(1, 2, 3))  # 6
print(soma(10, 20, 30, 40))  # 100
# âœ… ExplicaÃ§Ã£o: *args permite receber mÃºltiplos valores e tratÃ¡-los como uma tupla dentro da funÃ§Ã£o.




# ğŸ“Œ 6. **kwargs â€“ Argumentos Nomeados VariÃ¡veis:
def exibir_info(**kwargs):
    for chave, valor in kwargs.items():
        print(f"{chave}: {valor}")

exibir_info(nome="Carlos", idade=30, cidade="SÃ£o Paulo")
# âœ… ExplicaÃ§Ã£o: **kwargs recebe argumentos nomeados e os armazena em um dicionÃ¡rio.

# ğŸ“Œ Exemplo PrÃ¡tico â€“ Criando um Perfil de UsuÃ¡rio
def criar_perfil(nome, **informacoes):
    print(f"Perfil de {nome}:")
    for chave, valor in informacoes.items():
        print(f"- {chave}: {valor}")

criar_perfil("Alice", idade=30, cidade="Rio de Janeiro", profissÃ£o="Engenheira")

# SaÃ­da:
'''Perfil de Alice:  
- idade: 30  
- cidade: Rio de Janeiro  
- profissÃ£o: Engenheira  
'''



# ğŸ“Œ 7. FunÃ§Ã£o Retornando MÃºltiplos Valores:
def operacoes(a, b):
    soma = a + b
    subtracao = a - b
    return soma, subtracao  # Retorna uma tupla

resultado_soma, resultado_subtracao = operacoes(10, 5)
print(f"Soma: {resultado_soma}, SubtraÃ§Ã£o: {resultado_subtracao}")
# âœ… ExplicaÃ§Ã£o: Podemos retornar mÃºltiplos valores de uma funÃ§Ã£o, e depois desempacotÃ¡-los.