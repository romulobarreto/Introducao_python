'''
A funÃ§Ã£o map() Ã© usada para aplicar uma funÃ§Ã£o a cada item de um iterÃ¡vel (como uma lista ou tupla) e retorna um iterador com os resultados. Ã‰ Ãºtil quando vocÃª quer transformar todos os elementos de uma coleÃ§Ã£o sem precisar escrever um loop explÃ­cito.

Aqui estÃ£o alguns exemplos bem explicados para vocÃª entender o uso do map():
'''

# ğŸ“Œ Exemplo 1: Dobrar todos os nÃºmeros de uma lista:
numeros = [1, 2, 3, 4, 5]

# FunÃ§Ã£o que dobra um nÃºmero
def dobrar(num):
    return num * 2

# Usando map para aplicar a funÃ§Ã£o a todos os elementos
dobrados = list(map(dobrar, numeros))

print(dobrados)  # SaÃ­da: [2, 4, 6, 8, 10]
# âœ… Aqui usamos map() para dobrar todos os nÃºmeros da lista sem precisar de um loop for.




# ğŸ“Œ Exemplo 2: Usando map() com lambda:
numeros = [1, 2, 3, 4, 5]

# Usando lambda para evitar criar uma funÃ§Ã£o separada
dobrados = list(map(lambda num: num * 2, numeros))

print(dobrados)  # SaÃ­da: [2, 4, 6, 8, 10]
# âœ… O cÃ³digo fica mais curto e direto, jÃ¡ que usamos lambda.




# ğŸ“Œ Exemplo 3: Converter uma lista de temperaturas de Celsius para Fahrenheit:
celsius = [0, 10, 20, 30, 40]

# FÃ³rmula para converter Celsius para Fahrenheit
fahrenheit = list(map(lambda c: (c * 9/5) + 32, celsius))

print(fahrenheit)  # SaÃ­da: [32.0, 50.0, 68.0, 86.0, 104.0]
#âœ… O map() ajuda a converter todos os valores da lista sem precisar de um loop.




# ğŸ“Œ Exemplo 4: Pegando apenas os nomes de uma lista de dicionÃ¡rios:
pessoas = [
    {"nome": "Alice", "idade": 25},
    {"nome": "Bruno", "idade": 17},
    {"nome": "Carlos", "idade": 30},
    {"nome": "Daniela", "idade": 16},
]

# Pegando apenas os nomes
nomes = list(map(lambda pessoa: pessoa["nome"], pessoas))

print(nomes)  # SaÃ­da: ['Alice', 'Bruno', 'Carlos', 'Daniela']
# âœ… Aqui usamos map() para extrair apenas os nomes das pessoas.




# ğŸ“Œ Exemplo 5: Elevando nÃºmeros ao quadrado:
numeros = [2, 3, 4, 5]

# Aplicando a funÃ§Ã£o de elevar ao quadrado
quadrados = list(map(lambda x: x ** 2, numeros))

print(quadrados)  # SaÃ­da: [4, 9, 16, 25]
# âœ… map() permite transformar rapidamente todos os elementos da lista.




# ğŸ“Œ Exemplo 6: Trabalhando com mÃºltiplas listas:
numeros1 = [1, 2, 3, 4]
numeros2 = [5, 6, 7, 8]

# Somando os elementos correspondentes das duas listas
soma = list(map(lambda x, y: x + y, numeros1, numeros2))

print(soma)  # SaÃ­da: [6, 8, 10, 12]
# âœ… map() pode trabalhar com mÃºltiplas listas ao mesmo tempo.




'''
ğŸ¤” Quando usar map()?
	â€¢	Quando vocÃª precisa aplicar a mesma funÃ§Ã£o a todos os elementos de uma coleÃ§Ã£o.
	â€¢	Quando quer evitar escrever um loop explÃ­cito (for).
	â€¢	Quando quer deixar o cÃ³digo mais conciso e legÃ­vel.
'''

# ğŸ”¹ Dica: Se o objetivo for apenas criar uma nova lista com os valores transformados, o uso de list comprehension pode ser uma alternativa mais legÃ­vel:
dobrados = [num * 2 for num in numeros]
# Em muitos casos, list comprehension Ã© preferida porque Ã© mais fÃ¡cil de entender do que map().